<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[前端模块化]]></title>
      <url>%2F2017%2F01%2F04%2F%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96%2F</url>
      <content type="text"><![CDATA[为什么要前端模块化？ 将公共功能进行封装实现复用 灵活解决依赖 解决全局变量污染 如何实现前端模块化？1234567891011121314&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;!-- 通过标签加载js是不能做到模块化的 --&gt; &lt;script src="./js/jquery.min.js"&gt;&lt;/script&gt; &lt;script src="./js/jquery.cookie.js"&gt;&lt;/script&gt; &lt;script src="./js/a.js"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; Javascript 语言本身是不具备模块化能力的，需要自已进行封装来实现模块的定义以及加载，其实现遵照一定的规范（COMMONJS） COMMONJS 是一个定义模块的规范，根据实践分成两种具体实现，一种是Nodejs（CMD），另外一种浏览器端的实现requirejs（AMD）。 CMD Common Module Define AMD Async Module Define 前端模块化使用requirejs requirejs 本身是一个js文件，它按照AMD规范实来实现模块的定义和加载规则，应用在浏览器端 定义模块通过define()方法来定义一个模块 基本定义 123456// 模块定义define(function () &#123; alert('hello');&#125;); 依赖注入 123456// 定义模块，使用依赖注入解决依赖define(['./a', './b', './c'], function (a, b, c) &#123; console.log(a + '现在是:' + b + '今天的任务是' + c.join('、'));&#125;); 返回值 定义模块时，可以有返回值，但并不是必须，返回数据类型没有任何约束，通常返回值是对象更有意义。 123456789101112131415161718define(function () &#123; // 处理逻辑 function sayHello(name) &#123; alert('你好' + name + '你好帅!'); &#125; var todos = ['起床', '上课']; return &#123; name: 'laozhao', sayHello: sayHello, todos: todos &#125; // return sayHello;&#125;); 加载模块通过require()方法来加载一个模块 基本使用 1234&lt;script src="./libs/require.js"&gt;&lt;/script&gt;&lt;script&gt; require(['./libs/a']);&lt;/script&gt; 加载有依赖的模块 1234&lt;script src="./libs/require.js"&gt;&lt;/script&gt;&lt;script&gt; require(['./libs/a']);&lt;/script&gt; 依赖注入 12345678&lt;h2&gt;&lt;/h2&gt;&lt;script src="./libs/require.js"&gt;&lt;/script&gt;&lt;script&gt; require(['./libs/main'], function (main) &#123; // console.log(main); document.querySelector('h2').innerHTML = main; &#125;);&lt;/script&gt; 入口文件通过为引入require的标签加入data-main属性，其属性值为某一个模块的路径，此模块可以自动被加载并执行。 1&lt;script src="./libs/require.js" data-main="./libs/a.js"&gt;&lt;/script&gt; 加载路径requirejs加载模块时，路径是遵照一些规则的，分成以下几种情况 当没有入口文件时，加载路径以引入requirejs的页面为准 当存在入口文件时，加载路径以入口文件为准 通过配置可以自定义路径 123456// 通过配置文件可以改变require.config(&#123; baseUrl: './src'&#125;);require(['a']); 配置项 配置基础路径 1234// 通过配置文件可以改变require.config(&#123; baseUrl: './src'&#125;); 配置路径 1234567require.config(&#123; baseUrl: './', paths: &#123; jquery: 'assets/jquery/jquery', template: 'assets/artTemplate/template-native' &#125;&#125;); 配置不支持模块的插件 12345678910111213require.config(&#123; baseUrl: './', paths: &#123; jquery: 'assets/jquery/jquery', template: 'assets/artTemplate/template-native', bootstrap: 'assets/bootstrap/js/bootstrap.min' &#125;, shim: &#123; bootstrap: &#123; deps: ['jquery'] &#125; &#125;&#125;);]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[最常用的20个javascript方法函数]]></title>
      <url>%2F2017%2F01%2F03%2F%E6%9C%80%E5%B8%B8%E7%94%A8%E7%9A%8420%E4%B8%AAjavascript%E6%96%B9%E6%B3%95%E5%87%BD%E6%95%B0%2F</url>
      <content type="text"><![CDATA[1.字符串长度截取: 1234567891011121314151617181920function cutstr(str, len) &#123; var temp, icount = 0, patrn = /[^\x00-\xff]/， strre = ""; for (var i = 0; i &lt; str.length; i++) &#123; if (icount &lt; len - 1) &#123; temp = str.substr(i, 1); if (patrn.exec(temp) == null) &#123; icount = icount + 1 &#125; else &#123; icount = icount + 2 &#125; strre += temp &#125; else &#123; break; &#125; &#125; return strre + "..."&#125; 2.替换全部:123String.prototype.replaceAll = function(s1, s2) &#123; return this.replace(new RegExp(s1, "gm"), s2)&#125; 3.清除空格:1234String.prototype.trim = function() &#123; var reExtraSpace = /^\s*(.*?)\s+$/; return this.replace(reExtraSpace, "$1")&#125; 4.清除左空格/右空格:12function ltrim(s)&#123; return s.replace( /^(\s*|*)/, ""); &#125;function rtrim(s)&#123; return s.replace( /(\s*|*)$/, ""); &#125; 5.判断是否以某个字符串开头:123String.prototype.startWith = function (s) &#123; return this.indexOf(s) == 0&#125; 6.判断是否以某个字符串结束:1234String.prototype.endWith = function (s) &#123; var d = this.length - s.length; return (d &gt;= 0 &amp;&amp; this.lastIndexOf(s) == d)&#125; 7.时间日期格式转换:123456789101112131415161718Date.prototype.Format = function(formatStr) &#123; var str = formatStr; var Week = ['日', '一', '二', '三', '四', '五', '六']; str = str.replace(/yyyy|YYYY/, this.getFullYear()); str = str.replace(/yy|YY/, (this.getYear() % 100) &gt; 9 ? (this.getYear() % 100).toString() : '0' + (this.getYear() % 100)); str = str.replace(/MM/, (this.getMonth() + 1) &gt; 9 ? (this.getMonth() + 1).toString() : '0' + (this.getMonth() + 1)); str = str.replace(/M/g, (this.getMonth() + 1)); str = str.replace(/w|W/g, Week[this.getDay()]); str = str.replace(/dd|DD/, this.getDate() &gt; 9 ? this.getDate().toString() : '0' + this.getDate()); str = str.replace(/d|D/g, this.getDate()); str = str.replace(/hh|HH/, this.getHours() &gt; 9 ? this.getHours().toString() : '0' + this.getHours()); str = str.replace(/h|H/g, this.getHours()); str = str.replace(/m m/, this.getMinutes() &gt; 9 ? this.getMinutes().toString() : '0' + this.getMinutes()); str = str.replace(/m/g, this.getMinutes()); str = str.replace(/ss|SS/, this.getSeconds() &gt; 9 ? this.getSeconds().toString() : '0' + this.getSeconds()); str = str.replace(/s|S/g, this.getSeconds()); return str&#125; 8.转义html标签:123function HtmlEncode(text) &#123; return text.replace(/&amp;/g, '&amp;').replace(/\"/g, '"').replace(/ /g, '&gt;')&#125; 9.判断是否为数字类型:12345678function isDigit(value) &#123; var patrn = /^[0-9]*$/; if (patrn.exec(value) == null || value == "") &#123; return false &#125; else &#123; return true &#125;&#125; 10.设置cookie值:12345678910function setCookie(name, value, Hours) &#123; var d = new Date(); var offset = 8; var utc = d.getTime() + (d.getTimezoneOffset() * 60000); var nd = utc + (3600000 * offset); var exp = new Date(nd); exp.setTime(exp.getTime() + Hours * 60 * 60 * 1000); document.cookie = name + "=" + escape(value) + ";path=/;expires=" + exp.toGMTString() + ";domain=feiqueedu.com;"&#125; 11.获取cookie值:12345function getCookie(name) &#123; var arr = document.cookie.match(new RegExp("(^| )" + name + "=([^;]*)(;|$)")); if (arr != null) return unescape(arr[2]); return null&#125; 12.加入收藏夹:1234567891011function AddFavorite(sURL, sTitle) &#123; try &#123; window.external.addFavorite(sURL, sTitle) &#125; catch(e) &#123; try &#123; window.sidebar.addPanel(sTitle, sURL, "") &#125; catch(e) &#123; alert("加入收藏失败，请使用Ctrl+D进行添加") &#125; &#125;&#125; 13.设为首页:12345678910111213141516function setHomepage() &#123; if (document.all) &#123; document.body.style.behavior = 'url(#default#homepage)'; document.body.setHomePage(' http://www.feiqueedu.com ') &#125; else if (window.sidebar) &#123; if (window.netscape) &#123; try &#123; netscape.security.PrivilegeManager.enablePrivilege("UniversalXPConnect") &#125; catch(e) &#123; alert("该操作被浏览器拒绝，如果想启用该功能，请在地址栏内输入 about:config,然后将项 signed.applets.codebase_principal_support 值该为true") &#125; &#125; var prefs = Components.classes['@mozilla.org/preferences-service;1'].getService(Components.interfaces.nsIPrefBranch); prefs.setCharPref('browser.startup.homepage', '') &#125;&#125; 14.加载样式文件:123456789101112function LoadStyle(url) &#123; try &#123; document.createStyleSheet(url) &#125; catch(e) &#123; var cssLink = document.createElement('link'); cssLink.rel = 'stylesheet'; cssLink.type = 'text/css'; cssLink.href = url; var head = document.getElementsByTagName('head')[0]; head.appendChild(cssLink) &#125;&#125; 15.返回脚本内容:function evalscript(s) {if(s.indexOf(‘var p = /]?&gt;([^\x00]?)&lt;\/script&gt;/ig;var arr = [];while(arr = p.exec(s)) {var p1 = /]?src=\”([^>]?)\”[^>]*?(reload=\”1\”)?(?:charset=\”([\w-]+?)\”)?&gt;&lt;\/script&gt;/i;var arr1 = [];arr1 = p1.exec(arr[0]);if(arr1) {appendscript(arr1[1], ‘’, arr1[2], arr1[3]);} else {p1 = /([^\x00]+?)&lt;\/script&gt;/i;arr1 = p1.exec(arr[0]);appendscript(‘’, arr1[2], arr1[1].indexOf(‘reload=’) != -1);}}return s;} 16.清除脚本内容:123function stripscript(s) &#123; return s.replace(/.*?&lt;\/script&gt;/ig, '');&#125; 17.动态加载脚本文件:1function appendscript(src, text, reload, charset) &#123;var id = hash(src + text);if(!reload &amp;&amp; in_array(id, evalscripts)) return;if(reload &amp;&amp; $(id)) &#123;$(id).parentNode.removeChild($(id));&#125;evalscripts.push(id);var scriptNode = document.createElement("script");scriptNode.type = "text/javascript";scriptNode.id = id;scriptNode.charset = charset ? charset : (BROWSER.firefox ? document.characterSet : document.charset);try &#123;if(src) &#123;scriptNode.src = src;scriptNode.onloadDone = false;scriptNode.onload = function () &#123;scriptNode.onloadDone = true;JSLOADED[src] = 1;&#125;;scriptNode.onreadystatechange = function () &#123;if((scriptNode.readyState == 'loaded' || scriptNode.readyState == 'complete') &amp;&amp; !scriptNode.onloadDone) &#123;scriptNode.onloadDone = true;JSLOADED[src] = 1;&#125;&#125;;&#125; else if(text)&#123;scriptNode.text = text;&#125;document.getElementsByTagName('head')[0].appendChild(scriptNode);&#125; catch(e) &#123;&#125;&#125; 18.返回按ID检索的元素对象:123function $(id) &#123; return !id ? null : document.getElementById(id);&#125; 19.跨浏览器绑定事件:12345678910function addEventSamp(obj,evt,fn)&#123; if(!oTarget)&#123;return;&#125; if (obj.addEventListener) &#123; obj.addEventListener(evt, fn, false); &#125;else if(obj.attachEvent)&#123; obj.attachEvent('on'+evt,fn); &#125;else&#123; oTarget["on" + sEvtType] = fn; &#125;&#125; 20.跨浏览器删除事件:12345678910function delEvt(obj,evt,fn)&#123; if(!obj)&#123;return;&#125; if(obj.addEventListener)&#123; obj.addEventListener(evt,fn,false); &#125;else if(oTarget.attachEvent)&#123; obj.attachEvent("on" + evt,fn); &#125;else&#123; obj["on" + evt] = fn; &#125;&#125;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[WampServer环境搭建--补充]]></title>
      <url>%2F2017%2F01%2F03%2FWampServer%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA-%E8%A1%A5%E5%85%85%2F</url>
      <content type="text"><![CDATA[服务器配置文档 隐藏入口文件 1.创建.htaccess文件 2.将如下代码粘贴入 12345678&lt;IfModule mod_rewrite.c&gt; Options +FollowSymlinks -Multiviews RewriteEngine On RewriteCond %&#123;REQUEST_FILENAME&#125; !-d RewriteCond %&#123;REQUEST_FILENAME&#125; !-f RewriteRule ^(.*)$ index.php/$1 [QSA,PT,L]&lt;/IfModule&gt; 3.开启Apache rewrite模块，将#号删除 1#LoadModule rewrite_module modules/mod_rewrite.so 4.设置目录权限 搜索找到 AllowOverride 设置 AllowOverride All 配置apache反向代理 1.打开配置文件httpd.conf 2.开启 proxy_http_module 和 proxy_module 模块，将#号删除 12#LoadModule proxy_module modules/mod_proxy.so#LoadModule proxy_http_module modules/mod_proxy_http.so 3.代理详细配置 可以单独为某一个虚拟主机配置反向代理，这样不同的虚拟主机就可以被代理到不同的服务器了 4.开启辅配置，将#号删除 1#Include conf/extra/httpd-vhosts.conf 5.配置虚拟主机 12345678910111213141516&lt;VirtualHost *:80&gt; ServerAdmin webmaster@dummy-host.studyit.com DocumentRoot &quot;E:/www/studyit&quot; ServerName studyit.com ServerAlias www.studyit.com ErrorLog &quot;logs/dummy-host.studyit.com-error.log&quot; CustomLog &quot;logs/dummy-host.studyit.com-access.log&quot; common # 将两行代码粘贴过来 ProxyRequests Off # 访问/api 相当于访问 http://api.botue.com # 这样所有的请求就经过 /api 被代理到 http://api.botue.com了 ProxyPass /api http://api.botue.com #这里http://api.botue.com是我的服务器，在公司中要以实际为准 # /api 也不是固定的，可以自行调整&lt;/VirtualHost&gt; PHP中不现实notice提示的操作 1.从服务器打开任意php文件，php文件代码如下 1234&lt;?phpphpinfo();exit();?&gt; 2.找到Loaded Configuration File，复制后面的路径，修改php.ini 搜索error_reporting,修改成1error_reporting = E_ALL &amp; ~E_NOTICE]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Fiddler抓包工具的使用]]></title>
      <url>%2F2017%2F01%2F01%2FFiddler%E6%8A%93%E5%8C%85%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8%2F</url>
      <content type="text"><![CDATA[下载及安装 搜索下载Fiddler,安装在任意自己习惯的盘符即可 一些简单的配置注意：配置时需要pc和手机在同一局域网下！！！！！！ 1.启动Fiddler，打开菜单栏中的 Tools &gt; Fiddler Options，打开“Fiddler Options”对话框 2.在Fiddler Options”对话框切换到“Connections”选项卡，然后勾选“Allow romote computers to connect”后面的复选框，然后点击“OK”按钮。(此处的8888也可以修改，不修改即可) 3.在Fiddler Options”对话框切换到“HTTPS”选项卡，然后勾选“Decypt HTTPS traffic”后面的复选框，需要安装证书，直接点确定即可，然后点击“OK”按钮。（此操作是为了解决有些网站加密协议拿不到数据的情况） 4.在本机命令行输入：ipconfig，找到本机的ip地址。 5.打开手机wifi设置,找到你连接的网络，修改网络，把代理设置成手动，服务器填上面获取到的ip,端口为8888,（如果你自己修改了，就填写你修改的值），然后保存即可。 6.重启Fiddler，在手机端方位数据，pc端即可拿到请求和响应的数据。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[WampServer环境搭建]]></title>
      <url>%2F2016%2F12%2F31%2FWampServer%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%2F</url>
      <content type="text"><![CDATA[Wamp Windows + Apache + Mysql + PHP，首字母组合。 安装WampServer 安装wampserver，和普通软件安装无差别，除指定安装路径外，其它默认安装。 管理HTTP服务1.任务图标绿色为正常启动状态 2.通过图形控制台可以启动、重启、停止所有服务 或者单独启动、重启、停止特定服务 注意事项： 1、检查网络是不是通的 ping 对方IP 2、检查防火墙是否开启，如果开启将不能正常被访问 3、检查访问权限 **Allow from all** 4、理解默认索引 5、确保端口没有被其它程序占用 6、“#”表示注释 7、修改配置要格外小心，禁止无意修改其它内容 配置根目录网站根目录是Web服务器上存放网站程序的空间，可通过修改配置文件自定义，如E:/www 具体步骤如下 1、打开配置文件，控制台选择 或者 wampserver安装目录下&emsp;&emsp;bin\apache\Apache2.2.21\conf\httpd.conf 2、设定根目录，查找并修改 例如: 这样就指定了 “E:/www/“为存放网站的根目录。 3、配置根目录，查找 修改成 4、修改完后，并不能立即生效，需要重启Apache 注：可以指定任意目录为根目录 网站部署将我们制作好的网页拷贝到配置好的根目录下，浏览器访问127.0.0.1即可。 配置虚拟主机在一台Web服务器上，我们可以通过配置虚拟主机，然后分别设定根目录，实现对多个网站的管理。 具体步骤如下： 1、开启虚拟主机辅配置，在httpd.conf 中找到 去掉前面的#号注释，开启虚拟主机配置2、配置虚拟主机，打开 &emsp;&emsp;conf/extra/httpd-vhosts.conf 复制一份上图的代码，&emsp;&emsp;分别修改以下三项DocumentRoot “E:/www/example”ServerName “example.com “ServerAlias “www.example.com”其它项无需指定。 3、修改DNS（hosts）文件打开C:\Windows\System32\drivers\etc\hosts目录是固定的 注：修改hosts文件权限 4、重启Apache 5、浏览器访问www.example.com 如果想再配置个的话，就重复最后两个步骤即可。（配置虚拟主机2、3、) 配置成为www下有两个站点]]></content>
    </entry>

    
  
  
</search>
